# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUserId: String
  id: ID!
  updatedAt: DateTime
  updatedByUserId: String
  version: Float
}

"""The User model"""
type Jwt {
  jwt: String
  lastName: String
  name: String
  profilePhoto: String
  role: Role
  roleMenus: [Menu!]
  userId: String
  username: String
}

"""The Menu model"""
type Menu implements IModelData {
  activateAction: Boolean
  active: Boolean
  createAction: Boolean
  createdAt: DateTime
  createdByUserId: String
  deleteAction: Boolean
  fullAccess: Boolean
  icon: String
  id: ID!
  inactiveAction: Boolean
  isHidden: Boolean
  menuItems: [MenuItem!]
  menuItemsLogin: [MenuItem!]
  module: Module
  moduleId: String
  name: String
  order: Float
  readAction: Boolean
  roles: [Role!]
  rolesId: [String!]
  updateAction: Boolean
  updatedAt: DateTime
  updatedByUserId: String
  version: Float
}

"""The MenuItem model"""
type MenuItem implements IModelData {
  activateAction: Boolean
  active: Boolean
  createAction: Boolean
  createdAt: DateTime
  createdByUserId: String
  deleteAction: Boolean
  fullAccess: Boolean
  icon: String
  id: ID!
  inactiveAction: Boolean
  isHidden: Boolean
  menu: Menu
  menuId: String
  module: Module
  moduleId: String
  name: String
  order: Float
  readAction: Boolean
  roles: [Role!]
  rolesId: [String!]
  updateAction: Boolean
  updatedAt: DateTime
  updatedByUserId: String
  version: Float
}

"""The Module model"""
type Module implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUserId: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUserId: String
  url: String
  version: Float
}

type Mutation {
  changeActiveUser(active: Boolean!, id: String!): Boolean!
  changePasswordUser(id: String!, password: String!): Boolean!
  createUser(data: NewUser!): User!
  deleteUser(id: String!): Boolean!
  login(password: String!, username: String!): Jwt!
  resetPasswordUser(id: String!): Boolean!
  singleUpload(file: Upload, id: String!): Boolean!
  updateUser(data: NewUser!, id: String!): User!
  userProfileUploadImage(file: Upload, id: String!): Boolean!
}

input NewUser {
  birthdate: DateTime
  email: String
  lastName: String
  name: String
  password: String
  phone: String
  profilePhoto: String
  roleId: String
  username: String
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  getAllUser(
    """Paginate after opaque cursor"""
    after: String
    allData: Boolean!

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    orderCreated: Boolean!
  ): UserConnection!
  getUser(id: String!): User
  getValidationDocumentNumberUser(documentNumber: String!): Boolean!
  me: Jwt!
}

"""The Role model"""
type Role implements IModelData {
  active: Boolean
  createdAt: DateTime
  createdByUserId: String
  id: ID!
  name: String
  updatedAt: DateTime
  updatedByUserId: String
  version: Float
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""The User model"""
type User {
  active: Boolean
  birthdate: DateTime
  createdAt: DateTime
  createdByUser: User
  createdByUserId: String
  documentNumber: String
  email: String
  id: ID!
  lastName: String
  name: String
  password: String
  phone: String
  profilePhoto: String
  role: Role
  roleId: String
  updatedAt: DateTime
  updatedByUser: User
  updatedByUserId: String
  username: String
  version: Float
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!

  """Total Count"""
  totalCount: Float
}

type UserEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: User!
}
